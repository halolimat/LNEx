---

- name: Create workspace directory
  file:
    path: ~/workspace
    state: directory





# DisasterRecord

- name: Check if DisasterRecord Exists
  stat:
    path: ~/workspace/DisasterRecord/README.md
  register: DisasterRecord_init

- name: Check if DisasterRecord VE Exists
  stat:
    path: ~/workspace/DisasterRecord/bin/activate
  register: DisasterRecordVE_init

- name: Clone DisasterRecord
  git:
    repo: https://github.com/shrutikar/DisasterRecord.git
    dest: ~/workspace/DisasterRecord
    version: modularized
  when: DisasterRecord_init.stat.exists == False

- name: Create DisasterRecord virtualenv
  command: virtualenv -p python3 ~/workspace/DisasterRecord
  when: DisasterRecordVE_init.stat.exists == False

# COPY DisasterRecord REPLACEMENT CODE

- name: Copy fixed DisasterRecord/requirements.txt file to ~/workspace/DisasterRecord
  copy: src=DisasterRecord/requirements.txt dest=~/workspace/DisasterRecord/requirements.txt owner=root group=root mode=0644

- name: Copy fixed DisasterRecord/make.sh file to ~/workspace/DisasterRecord
  copy: src=DisasterRecord/make.sh dest=~/workspace/DisasterRecord/make.sh owner=root group=root mode=0755

#- name: Copy fixed DisasterRecord/core.py file to ~/workspace/DisasterRecord
#  copy: src=DisasterRecord/core.py dest=~/workspace/DisasterRecord/core.py owner=root group=root mode=0644

- name: Generate core.py
  template: src=DisasterRecord/core.py.j2 dest=~/workspace/DisasterRecord/core.py owner=root group=root mode=0644

- name: Generate file-mapping.sh
  template: src=DisasterRecord/file-mapping.sh.j2 dest=~/workspace/DisasterRecord/file-mapping.sh owner=root group=root mode=0755

- name: Generate osm-mapping.sh
  template: src=DisasterRecord/osm-mapping.sh.j2 dest=~/workspace/DisasterRecord/osm-mapping.sh owner=root group=root mode=0755

- name: Generate tweet-mapping.sh
  template: src=DisasterRecord/tweet-mapping.sh.j2 dest=~/workspace/DisasterRecord/tweet-mapping.sh owner=root group=root mode=0755

- name: Copy fixed DisasterRecord/requirements.txt file to ~/workspace/DisasterRecord
  copy: src=DisasterRecord/requirements.txt dest=~/workspace/DisasterRecord/requirements.txt owner=root group=root mode=0644

- name: Create mike_img directory
  file:
    path: ~/workspace/DisasterRecord/mike_img
    state: directory

- name: Copy fixed DisasterRecord/load_pb.py file to ~/workspace/DisasterRecord/mike_img
  copy: src=DisasterRecord/load_pb.py dest=~/workspace/DisasterRecord/mike_img/load_pb.py owner=root group=root mode=0644

- name: Copy fixed DisasterRecord/server.py file to ~/workspace/DisasterRecord
  copy: src=DisasterRecord/server.py dest=~/workspace/DisasterRecord/server.py owner=root group=root mode=0644

- name: Install xlrd
  pip: 
    name: xlrd
    virtualenv: ~/workspace/DisasterRecord

- name: Install tweepy
  pip: 
    name: tweepy
    virtualenv: ~/workspace/DisasterRecord

- name: Install python-geohash
  pip: 
    name: python-geohash
    virtualenv: ~/workspace/DisasterRecord

- name: Install elasticsearch_dsl
  pip: 
    name: elasticsearch_dsl
    virtualenv: ~/workspace/DisasterRecord

- name: Install watson_developer_cloud
  pip: 
    name: watson_developer_cloud
    virtualenv: ~/workspace/DisasterRecord

- name: Install tensorflow
  pip: 
    name: tensorflow
    virtualenv: ~/workspace/DisasterRecord

- name: Install Other DisasterRecord dependencies
  pip: 
    requirements: ~/workspace/DisasterRecord/requirements.txt
    virtualenv: ~/workspace/DisasterRecord

- name: Install LNEx dependencies for DisasterRecord
  pip: 
    requirements: ~/workspace/LNEx/requirements.txt
    virtualenv: ~/workspace/DisasterRecord

- name: Create symbolic link for LNEx
  file:
    src: "/root/workspace/LNEx/LNEx"
    dest: "/root/workspace/DisasterRecord/LNEx"
    state: link

- name: Check if DisasterRecord ObjectDetection Exists
  stat:
    path: ~/workspace/DisasterRecord/object_detection
  register: DisasterRecordOD_init

- name: Clone Tensorflow-ImageObjects-Summarizer
  git:
    repo: https://github.com/halolimat/Tensorflow-ImageObjects-Summarizer
    dest: ~/workspace/DisasterRecord/OBJTMP
  when: DisasterRecordOD_init.stat.exists == False

- name: Move object_detection/ back a folder
  command: mv /root/workspace/DisasterRecord/OBJTMP/object_detection /root/workspace/DisasterRecord/object_detection
  when: DisasterRecordOD_init.stat.exists == False

- name: Remove OBJTMP
  command: rm -r /root/workspace/DisasterRecord/OBJTMP
  when: DisasterRecordOD_init.stat.exists == False

- name: Copy fixed DisasterRecord/object_detection/ObjectDetector.py file to ~/workspace/DisasterRecord/object_detection
  copy: src=DisasterRecord/ObjectDetector.py dest=~/workspace/DisasterRecord/object_detection/ObjectDetector.py owner=root group=root mode=0644




# Tensorflow-ImageObjects-Summarizer

#- name: Check if Tensorflow-ImageObjects-Summarizer Exists
#  stat:
#    path: ~/workspace/Tensorflow-ImageObjects-Summarizer/.gitignore
#  register: TensorflowImageObjectsSummarizer_init

#- name: Check if DisasterRecord VE Exists
#  stat:
#    path: ~/workspace/Tensorflow-ImageObjects-Summarizer/bin/activate
#  register: TensorflowImageObjectsSummarizerVE_init

#- name: Clone Tensorflow-ImageObjects-Summarizer
#  git:
#    repo: https://github.com/halolimat/Tensorflow-ImageObjects-Summarizer
#    dest: ~/workspace/Tensorflow-ImageObjects-Summarizer
#  when: TensorflowImageObjectsSummarizer_init.stat.exists == False

#- name: Create Tensorflow-ImageObjects-Summarizer virtualenv
#  command: virtualenv ~/workspace/Tensorflow-ImageObjects-Summarizer
#  when: TensorflowImageObjectsSummarizerVE_init.stat.exists == False






# LNEx

- name: Check if LNEx Exists
  stat:
    path: ~/workspace/LNEx/README.md
  register: LNEx_init

- name: Check if LNEx VE Exists
  stat:
    path: ~/workspace/LNEx/bin/activate
  register: LNExVE_init

- name: Clone LNEx
  git:
    repo: https://github.com/halolimat/LNEx.git
    dest: ~/workspace/LNEx
  when: LNEx_init.stat.exists == False

- name: Create LNEx virtualenv
  command: virtualenv ~/workspace/LNEx -p python3
  when: LNExVE_init.stat.exists == False

- name: Copy fixed requirements.txt file to ~/workspace/LNEx
  copy: src=LNEx/requirements.txt dest=~/workspace/LNEx/requirements.txt owner=root group=root mode=0644
  when: LNEx_init.stat.exists == False

- name: Install LNEx dependencies
  pip: 
    requirements: ~/workspace/LNEx/requirements.txt
    virtualenv: ~/workspace/LNEx
  when: LNEx_init.stat.exists == False

- name: Copy LNExEnv wrapper to ~/workspace/LNEx
  copy: src=LNExEnv dest=~/workspace/LNEx/LNExEnv owner=root group=root mode=0755






# COPY LNEx REPLACEMENT CODE

- name: Copy fixed setup.py file to ~/workspace/LNEx
  copy: src=LNEx/setup.py dest=~/workspace/LNEx/setup.py owner=root group=root mode=0644

- name: Copy fixed pytest.py file to ~/workspace/LNEx
  copy: src=LNEx/pytest.py dest=~/workspace/LNEx/pytest.py owner=root group=root mode=0644

- name: Copy fixed initLoader.py file to ~/workspace/LNEx
  copy: src=LNEx/initLoader.py dest=~/workspace/LNEx/initLoader.py owner=root group=root mode=0644

- name: Copy fixed query.py file to ~/workspace/LNEx
  copy: src=LNEx/query.py dest=~/workspace/LNEx/query.py owner=root group=root mode=0644

- name: Copy fixed osm_gazetteer.py file to ~/workspace/LNEx/LNEx
  copy: src=LNEx/osm_gazetteer.py dest=~/workspace/LNEx/LNEx/osm_gazetteer.py owner=root group=root mode=0644

- name: Copy fixed __init__.py file to ~/workspace/LNEx/LNEx
  copy: src=LNEx/__init__.py dest=~/workspace/LNEx/LNEx/__init__.py owner=root group=root mode=0644

- name: Copy DRDB.py file to ~workspace/LNEx
  copy: src=DRDB.py dest=~/workspace/LNEx/DRDB.py owner=root group=root mode=0644

- name: Copy cli.py file to ~workspace/LNEx
  copy: src=LNEx/cli.py dest=~/workspace/LNEx/cli.py owner=root group=root mode=0644

- name: Copy geoInfo.py file to ~workspace/LNEx
  copy: src=LNEx/geoInfo.py dest=~/workspace/LNEx/geoInfo.py owner=root group=root mode=0644

- name: Copy queryBulk.py file to ~workspace/LNEx
  copy: src=LNEx/queryBulk.py dest=~/workspace/LNEx/queryBulk.py owner=root group=root mode=0644





# Django Setup

- name: Check if api Exists
  stat:
    path: ~/workspace/api/apiEnv
  register: api_init

- name: Check if api VE Exists
  stat:
    path: ~/workspace/api/bin/activate
  register: apiVE_init

- name: Create api directory
  file:
    path: ~/workspace/api
    state: directory
  when: api_init.stat.exists == False

- name: Create api virtualenv
  command: virtualenv ~/workspace/api
  when: apiVE_init.stat.exists == False

- name: Install Django
  pip: 
    name: Django
    virtualenv: ~/workspace/api

- name: Install Redis
  pip: 
    name: redis
    virtualenv: ~/workspace/api

- name: Copy apiEnv wrapper to ~/workspace/api
  copy: src=apiEnv dest=~/workspace/api/apiEnv owner=root group=root mode=0755

# Django setup

- name: Check if api Django project exists
  stat:
    path: ~/workspace/api/api/manage.py
  register: django_init

- name: Create new project
  command: ~/workspace/api/apiEnv django-admin startproject api chdir=~/workspace/api
  when: django_init.stat.exists == False

- name: Create new apiv1 app
  command: ~/workspace/api/apiEnv python manage.py startapp apiv1 chdir=~/workspace/api/api
  when: django_init.stat.exists == False

- name: Generate settings.py
  template: src=settings.py.j2 dest=~/workspace/api/api/api/settings.py owner=root group=root mode=0644

- name: Init Migrate
  command: ~/workspace/api/apiEnv python manage.py migrate chdir=~/workspace/api/api
  when: django_init.stat.exists == False

- name: Copy api/api/urls.py file to ~workspace/api/api/api
  copy: src=api/api/urls.py dest=~/workspace/api/api/api/urls.py owner=root group=root mode=0644

- name: Copy api/apiv1/urls.py file to ~workspace/api/api/apiv1
  copy: src=api/apiv1/urls.py dest=~/workspace/api/api/apiv1/urls.py owner=root group=root mode=0644

- name: Copy api/apiv1/views.py file to ~workspace/api/api/apiv1
  copy: src=api/apiv1/views.py dest=~/workspace/api/api/apiv1/views.py owner=root group=root mode=0644

- name: Copy DRDB.py file to ~workspace/api/api/apiv1
  copy: src=DRDB.py dest=~/workspace/api/api/apiv1/DRDB.py owner=root group=root mode=0644





# DB

- name: Copy initDB.py file to ~workspace/api/api/apiv1
  copy: src=initDB.py dest=~/workspace/api/api/apiv1/initDB.py owner=root group=root mode=0644

- name: init DB
  command: ~/workspace/api/apiEnv python initDB.py chdir=~/workspace/api/api/apiv1




- name: Copy startAPI file to ~
  copy: src=startAPI dest=~ owner=root group=root mode=755

- name: Copy LNExDB.py file to ~/workspace/LNEx
  copy: src=LNExDB.py dest=~/workspace/LNEx/LNExDB.py owner=root group=root mode=0755

- name: Copy LNEx/LNExLocal file to ~/workspace/LNEx
  copy: src=LNEx/LNExLocal dest=~/workspace/LNEx/LNExLocal owner=root group=root mode=0755

- name: Copy LNExCLI file to ~
  copy: src=LNExCLI dest=~ owner=root group=root mode=0755